! function(window, document, undefined) {
    "use strict";
    var Util = {};
    Util.throttle = function(fn, threshhold, scope) {
        threshhold || (threshhold = 250);
        var last, deferTimer;
        return function() {
            var context = scope || this,
                now = +new Date,
                args = arguments;
            last && last + threshhold > now ? (clearTimeout(deferTimer), deferTimer = setTimeout(function() {
                last = now, fn.apply(context, args)
            }, threshhold)) : (last = now, fn.apply(context, args))
        }
    }, Util.debounce = function(fn, delay) {
        var timeout = null;
        return function() {
            var context = this,
                args = arguments;
            clearTimeout(timeout), timeout = setTimeout(function() {
                fn.apply(context, args)
            }, delay)
        }
    }, Util.extend = function() {
        for (var i = 1; i < arguments.length; i++)
            for (var key in arguments[i]) arguments[i].hasOwnProperty(key) && (arguments[0][key] = arguments[i][key]);
        return arguments[0]
    }, Util.isElement = function(obj) {
        return !(!obj || 1 !== obj.nodeType)
    }, Util.hasClass = function(item, className) {
        return item.className.indexOf(className) > -1
    }, Util.isSmallScreen = function() {
        return window.innerWidth <= this.options.navBreakpoint
    }, Util.handleResize = function() {
        Util.throttle(this.reflowNavigation.bind(this), delay), Util.debounce(this.reflowNavigation.bind(this), delay);
        var condition = this.isSmallScreen(),
            change = !1;
        return !this.smallScreen && !condition || this.smallScreen && condition || (this.smallScreen = condition, change = !0), change ? void 0 : !1
    }, window.Util = Util
}(window, document),
    function(window, document, undefined) {
        "use strict";
        var Util = {};
        Util.throttle = function(fn, threshhold, scope) {
            threshhold || (threshhold = 250);
            var last, deferTimer;
            return function() {
                var context = scope || this,
                    now = +new Date,
                    args = arguments;
                last && last + threshhold > now ? (clearTimeout(deferTimer), deferTimer = setTimeout(function() {
                    last = now, fn.apply(context, args)
                }, threshhold)) : (last = now, fn.apply(context, args))
            }
        }, Util.debounce = function(fn, delay) {
            var timeout = null;
            return function() {
                var context = this,
                    args = arguments;
                clearTimeout(timeout), timeout = setTimeout(function() {
                    fn.apply(context, args)
                }, delay)
            }
        }, Util.extend = function() {
            for (var i = 1; i < arguments.length; i++)
                for (var key in arguments[i]) arguments[i].hasOwnProperty(key) && (arguments[0][key] = arguments[i][key]);
            return arguments[0]
        }, Util.isElement = function(obj) {
            return !(!obj || 1 !== obj.nodeType)
        }, Util.hasClass = function(item, className) {
            return item.className.indexOf(className) > -1
        }, Util.isSmallScreen = function() {
            return window.innerWidth <= this.options.navBreakpoint
        }, Util.handleResize = function() {
            Util.throttle(this.reflowNavigation.bind(this), delay), Util.debounce(this.reflowNavigation.bind(this), delay);
            var condition = this.isSmallScreen(),
                change = !1;
            return !this.smallScreen && !condition || this.smallScreen && condition || (this.smallScreen = condition, change = !0), change ? void 0 : !1
        }, window.Util = Util
    }(window, document), window.matchMedia = window.matchMedia || function(doc, undefined) {
    var docElem = doc.documentElement,
        refNode = docElem.firstElementChild || docElem.firstChild,
        fakeBody = doc.createElement("body"),
        div = doc.createElement("div");
    div.id = "mq-test-1", div.style.cssText = "position:absolute;top:-100em", fakeBody.style.background = "none", fakeBody.appendChild(div);
    var eminpx, mqRun = function(mq) {
            return div.innerHTML = '&shy;<style media="' + mq + '"> #mq-test-1 { width: 42px; }</style>', docElem.insertBefore(fakeBody, refNode), bool = 42 === div.offsetWidth, docElem.removeChild(fakeBody), {
                matches: bool,
                media: mq
            }
        },
        getEmValue = function() {
            var ret, body = docElem.body,
                fakeUsed = !1;
            return div.style.cssText = "position:absolute;font-size:1em;width:1em", body || (body = fakeUsed = doc.createElement("body"), body.style.background = "none"), body.appendChild(div), docElem.insertBefore(body, docElem.firstChild), fakeUsed ? docElem.removeChild(body) : body.removeChild(div), ret = eminpx = parseFloat(div.offsetWidth)
        },
        mqSupport = mqRun("(min-width: 0px)").matches;
    return function(mq) {
        if (mqSupport) return mqRun(mq);
        var min = mq.match(/\(min\-width:[\s]*([\s]*[0-9\.]+)(px|em)[\s]*\)/) && parseFloat(RegExp.$1) + (RegExp.$2 || ""),
            max = mq.match(/\(max\-width:[\s]*([\s]*[0-9\.]+)(px|em)[\s]*\)/) && parseFloat(RegExp.$1) + (RegExp.$2 || ""),
            minnull = null === min,
            maxnull = null === max,
            currWidth = doc.body.offsetWidth,
            em = "em";
        return min && (min = parseFloat(min) * (min.indexOf(em) > -1 ? eminpx || getEmValue() : 1)), max && (max = parseFloat(max) * (max.indexOf(em) > -1 ? eminpx || getEmValue() : 1)), bool = (!minnull || !maxnull) && (minnull || currWidth >= min) && (maxnull || max >= currWidth), {
            matches: bool,
            media: mq
        }
    }
}(document);
var BreakpointSwitcher = function(window, Util, matchMedia, document, undefined) {
    "use strict";
    var BreakpointSwitcher = function(options) {
        this.breakpoints = Util.extend({}, "object" == typeof options && options), this.currentView = null, window.addEventListener("resize", Util.throttle(this["switch"], 20, this)), window.addEventListener("load", Util.throttle(this["switch"], 20, this))
    };
    return BreakpointSwitcher.create = function(options) {
        if (!matchMedia) throw new Error("matchMedia is required for BreakpointSwitcher");
        if ("object" == typeof options) return new BreakpointSwitcher(options);
        throw new Error("Options object has to be passed to the constructor")
    }, BreakpointSwitcher.prototype.matchView = function(breakpoints) {
        var view = null;
        for (var key in breakpoints) matchMedia("(min-width: " + key + ")").matches && (view = breakpoints[key]);
        return view
    }, BreakpointSwitcher.prototype["switch"] = function() {
        var view = this.matchView(this.breakpoints);
        return this.currentView !== view ? (this.currentView && "function" == typeof this.currentView && this.currentView.call(window, !1), "function" == typeof view && view.call(window, !0), this.currentView = view) : null
    }, BreakpointSwitcher
}(window, window.Util, window.matchMedia, document);
! function(window, Util, document, undefined) {
    "use strict";
    var delay = 10,
        instances = [],
        NavPriority = function(element, options) {
            this.options = options, this.element = "string" == typeof element ? document.querySelector(element) : element, this.resizeListener = null, this.container = this.options.containerSelector ? this.element.querySelectorAll(this.options.containerSelector)[0] : this.element, this.navList = this.element.querySelectorAll("ul")[0], this.overflowMenu = this.createOverflowMenu(), this.overflowList = this.overflowMenu.querySelectorAll("ul")[0], this.overflowDropdown = this.element.parentNode.querySelector("[data-nav-priority-toggle]"), this.overflowBreakpoints = [], this.elementStyle = window.getComputedStyle(this.element), this.breakpoints = this.getBreakpoints(), this.setupEventListeners(), this.reflowNavigation()
        };
    return NavPriority.DEFAULTS = {
        dropdownLabel: 'More <i class="caret"></i>',
        dropdownMenuClass: "dropdown-menu dropdown-menu-right",
        dropdownMenuTemplate: '<li data-nav-priority-menu class="navbar-nav-more dropdown" aria-hidden="true"><a id="{{dropdownMenuId}}" href="#" class="navbar-toggle-more" data-toggle="dropdown" role="button" aria-haspopup="true" aria-expanded="false" data-nav-priority-toggle>{{dropdownLabel}}</a><ul class="{{dropdownMenuClass}}" aria-labelledby="{{dropdownMenuId}}"></ul></li>',
        containerSelector: "ul",
        containerWidthOffset: 10,
        threshold: 4
    }, NavPriority.create = function(element, options) {
        var listItems = element.querySelectorAll("li"),
            isValid = !0;
        if (!Util.isElement(element)) throw isValid = !1, new Error("element has to be DOM Element");
        return (0 === listItems.length || listItems.length <= options.threshold) && (isValid = !1), isValid ? new NavPriority(element, options) : null
    }, NavPriority.prototype.createOverflowMenu = function() {
        var overflowMenu = this.navList.querySelector("[data-nav-priority-menu]");
        if (!overflowMenu) {
            var menuDOM, menuId = "nav-link-more-" + instances.length,
                menuHtml = this.options.dropdownMenuTemplate,
                listItems = this.navList.children,
                listItemsLength = this.navList.children.length,
                lastItem = listItems[listItemsLength - 1];
            menuHtml = menuHtml.replace("{{dropdownLabel}}", this.options.dropdownLabel).replace("{{dropdownMenuClass}}", this.options.dropdownMenuClass).replace(new RegExp("{{dropdownMenuId}}", "g"), menuId), menuDOM = document.createElement("div"), menuDOM.innerHTML = menuHtml, lastItem.setAttribute("class", lastItem.className + " is-last"), this.navList.appendChild(menuDOM.firstChild), overflowMenu = this.navList.querySelector("[data-nav-priority-menu]")
        }
        if (!overflowMenu) throw new Error("overflowMenu does not exist, check your custom dropdownMenuTemplate parameter");
        return overflowMenu
    }, NavPriority.prototype.getBreakpoints = function() {
        for (var breakpoints = [], navListItems = this.navList.children, itemsLength = navListItems.length, dropdownMenuWidth = Math.ceil(this.overflowDropdown.getBoundingClientRect().width), itemBreakpoint = dropdownMenuWidth, i = 0; itemsLength > i; i++) {
            var item = navListItems[i];
            Util.hasClass(item, "navbar-nav-more") || (itemBreakpoint += Math.ceil(item.getBoundingClientRect().width), breakpoints.push(itemBreakpoint))
        }
        return breakpoints[breakpoints.length - 1] -= dropdownMenuWidth, breakpoints
    }, NavPriority.prototype.setupEventListeners = function() {
        this.resizeListener = Util.throttle(this.reflowNavigation, delay, this), window.addEventListener("resize", this.resizeListener)
    }, NavPriority.prototype.addToOverflow = function(item, breakpoint) {
        return this.overflowList.insertBefore(item, this.overflowList.firstChild), this.overflowBreakpoints.unshift(breakpoint), this.breakpoints.pop(), this.overflowBreakpoints
    }, NavPriority.prototype.removeFromOverflow = function(item, breakpoint) {
        return this.breakpoints.push(breakpoint), this.overflowBreakpoints.shift(), this.navList.insertBefore(item, this.overflowDropdown.parentNode), this.overflowBreakpoints
    }, NavPriority.prototype.toggleOverflowDropdown = function(condition) {
        return this.overflowMenu.setAttribute("aria-hidden", condition)
    }, NavPriority.prototype.reflowNavigation = function() {
        if (!this.resizeListener) return !1;
        for (var containerWidth = Math.ceil(this.container.getBoundingClientRect().width - this.options.containerWidthOffset), navListItems = this.navList.children, menuIndex = navListItems.length; menuIndex--;)
            if (!Util.hasClass(navListItems[menuIndex], "navbar-nav-more")) {
                var itemBreakpoint = this.breakpoints[menuIndex];
                itemBreakpoint >= containerWidth && this.addToOverflow(navListItems[menuIndex], itemBreakpoint)
            } for (var overflowIndex = this.overflowList.children.length; overflowIndex--;) this.overflowBreakpoints[0] < containerWidth && this.removeFromOverflow(this.overflowList.children[0], this.overflowBreakpoints[0]);
        this.toggleOverflowDropdown(0 == this.overflowList.children.length)
    }, NavPriority.prototype.destroy = function() {
        this.element.removeAttribute("data-nav-priority"), window.removeEventListener("resize", this.resizeListener), this.resizeListener = null;
        var overflowIndex = this.overflowList.children.length;
        if (overflowIndex)
            for (; this.overflowList.children.length;) this.removeFromOverflow(this.overflowList.children[0], this.overflowBreakpoints[0]);
        return this.toggleOverflowDropdown(0 == this.overflowList.children.length), this.element
    }, window.navPriority = function(selector, option) {
        var elements = document.querySelectorAll(selector);
        if ("string" == typeof option && "destroy" == option) {
            for (var i = 0; i < instances.length; i++) {
                var data = instances[i];
                data.destroy.call(data)
            }
            instances = []
        }
        if ("string" != typeof option)
            for (var i = 0; i < elements.length; i++) {
                var self = elements[i],
                    options = Util.extend({}, NavPriority.DEFAULTS, "object" == typeof option && option),
                    data = self.getAttribute("data-nav-priority");
                if (!data) {
                    var navPriority = NavPriority.create(self, options);
                    instances.push(navPriority), data = self.setAttribute("data-nav-priority", !0)
                }
            }
        return instances
    }, NavPriority
}(window, window.Util, document);
/*!
 * mobileSelect.js
 * (c) 2017-present onlyhom
 * Released under the MIT License.
 */
(function() {
    function getClass(dom, string) {
        return dom.getElementsByClassName(string)
    }

    function MobileSelect(config) {
        this.mobileSelect;
        this.wheelsData = config.wheels;
        this.jsonType = !1;
        this.cascadeJsonData = [];
        this.displayJson = [];
        this.curValue = null;
        this.curIndexArr = [];
        this.cascade = !1;
        this.startY;
        this.moveEndY;
        this.moveY;
        this.oldMoveY;
        this.offset = 0;
        this.offsetSum = 0;
        this.oversizeBorder;
        this.curDistance = [];
        this.clickStatus = !1;
        this.isPC = !0;
        this.init(config)
    }
    MobileSelect.prototype = {
        constructor: MobileSelect,
        init: function(config) {
            var _this = this;
            _this.keyMap = config.keyMap ? config.keyMap : {
                id: 'id',
                value: 'value',
                childs: 'childs'
            };
            _this.checkDataType();
            _this.renderWheels(_this.wheelsData, config.cancelBtnText, config.ensureBtnText);
            _this.trigger = document.querySelector(config.trigger);
            if (!_this.trigger) {
                console.error('mobileSelect has been successfully installed, but no trigger found on your page.');
                return !1
            }
            _this.wheel = getClass(_this.mobileSelect, 'wheel');
            _this.slider = getClass(_this.mobileSelect, 'selectContainer');
            _this.wheels = _this.mobileSelect.querySelector('.wheels');
            _this.liHeight = _this.mobileSelect.querySelector('li').offsetHeight;
            _this.ensureBtn = _this.mobileSelect.querySelector('.ensure');
            _this.cancelBtn = _this.mobileSelect.querySelector('.cancel');
            _this.grayLayer = _this.mobileSelect.querySelector('.grayLayer');
            _this.popUp = _this.mobileSelect.querySelector('.content');
            _this.callback = config.callback || function() {};
            _this.transitionEnd = config.transitionEnd || function() {};
            _this.onShow = config.onShow || function() {};
            _this.onHide = config.onHide || function() {};
            _this.initPosition = config.position || [];
            _this.titleText = config.title || '';
            _this.connector = config.connector || ' ';
            _this.triggerDisplayData = !(typeof(config.triggerDisplayData) == 'undefined') ? config.triggerDisplayData : !0;
            _this.trigger.style.cursor = 'pointer';
            _this.setStyle(config);
            _this.setTitle(_this.titleText);
            _this.checkIsPC();
            _this.checkCascade();
            _this.addListenerAll();
            if (_this.cascade) {
                _this.initCascade()
            }
            if (_this.initPosition.length < _this.slider.length) {
                var diff = _this.slider.length - _this.initPosition.length;
                for (var i = 0; i < diff; i++) {
                    _this.initPosition.push(0)
                }
            }
            _this.setCurDistance(_this.initPosition);
            _this.cancelBtn.addEventListener('click', function(event) {
                _this.hide()
            });
            _this.ensureBtn.addEventListener('click', function(event) {
                _this.hide();
                if (!_this.liHeight) {
                    _this.liHeight = _this.mobileSelect.querySelector('li').offsetHeight
                }
                var tempValue = '';
                for (var i = 0; i < _this.wheel.length; i++) {
                    i == _this.wheel.length - 1 ? tempValue += _this.getInnerHtml(i) : tempValue += _this.getInnerHtml(i) + _this.connector
                }
                if (_this.triggerDisplayData) {
                    _this.trigger.innerHTML = tempValue
                }
                _this.curIndexArr = _this.getIndexArr();
                _this.curValue = _this.getCurValue();
                _this.callback(_this.curIndexArr, _this.curValue)
            });
            _this.trigger.addEventListener('click', function(event) {
                _this.show()
            });
            _this.grayLayer.addEventListener('click', function(event) {
                _this.hide()
            });
            _this.popUp.addEventListener('click', function(event) {
                event.stopPropagation()
            });
            _this.fixRowStyle()
        },
        setTitle: function(string) {
            var _this = this;
            _this.titleText = string;
            _this.mobileSelect.querySelector('.title').innerHTML = _this.titleText
        },
        setStyle: function(config) {
            var _this = this;
            if (config.ensureBtnColor) {
                _this.ensureBtn.style.color = config.ensureBtnColor
            }
            if (config.cancelBtnColor) {
                _this.cancelBtn.style.color = config.cancelBtnColor
            }
            if (config.titleColor) {
                _this.title = _this.mobileSelect.querySelector('.title');
                _this.title.style.color = config.titleColor
            }
            if (config.textColor) {
                _this.panel = _this.mobileSelect.querySelector('.panel');
                _this.panel.style.color = config.textColor
            }
            if (config.titleBgColor) {
                _this.btnBar = _this.mobileSelect.querySelector('.btnBar');
                _this.btnBar.style.backgroundColor = config.titleBgColor
            }
            if (config.bgColor) {
                _this.panel = _this.mobileSelect.querySelector('.panel');
                _this.shadowMask = _this.mobileSelect.querySelector('.shadowMask');
                _this.panel.style.backgroundColor = config.bgColor;
                _this.shadowMask.style.background = 'linear-gradient(to bottom, ' + config.bgColor + ', rgba(255, 255, 255, 0), ' + config.bgColor + ')'
            }
            if (!isNaN(config.maskOpacity)) {
                _this.grayMask = _this.mobileSelect.querySelector('.grayLayer');
                _this.grayMask.style.background = 'rgba(0, 0, 0, ' + config.maskOpacity + ')'
            }
        },
        checkIsPC: function() {
            var _this = this;
            var sUserAgent = navigator.userAgent.toLowerCase();
            var bIsIpad = sUserAgent.match(/ipad/i) == "ipad";
            var bIsIphoneOs = sUserAgent.match(/iphone os/i) == "iphone os";
            var bIsMidp = sUserAgent.match(/midp/i) == "midp";
            var bIsUc7 = sUserAgent.match(/rv:1.2.3.4/i) == "rv:1.2.3.4";
            var bIsUc = sUserAgent.match(/ucweb/i) == "ucweb";
            var bIsAndroid = sUserAgent.match(/android/i) == "android";
            var bIsCE = sUserAgent.match(/windows ce/i) == "windows ce";
            var bIsWM = sUserAgent.match(/windows mobile/i) == "windows mobile";
            if ((bIsIpad || bIsIphoneOs || bIsMidp || bIsUc7 || bIsUc || bIsAndroid || bIsCE || bIsWM)) {
                _this.isPC = !1
            }
        },
        show: function() {
            this.mobileSelect.classList.add('mobileSelect-show');
            if (typeof this.onShow === 'function') {
                this.onShow(this)
            }
        },
        hide: function() {
            this.mobileSelect.classList.remove('mobileSelect-show');
            if (typeof this.onHide === 'function') {
                this.onHide(this)
            }
        },
        renderWheels: function(wheelsData, cancelBtnText, ensureBtnText) {
            var _this = this;
            var cancelText = cancelBtnText ? cancelBtnText : '取消';
            var ensureText = ensureBtnText ? ensureBtnText : '确认';
            _this.mobileSelect = document.createElement("div");
            _this.mobileSelect.className = "mobileSelect";
            _this.mobileSelect.innerHTML = '<div class="grayLayer"></div>' + '<div class="content">' + '<div class="btnBar">' + '<div class="fixWidth">' + '<div class="cancel">' + cancelText + '</div>' + '<div class="title"></div>' + '<div class="ensure">' + ensureText + '</div>' + '</div>' + '</div>' + '<div class="panel">' + '<div class="fixWidth">' + '<div class="wheels">' + '</div>' + '<div class="selectLine"></div>' + '<div class="shadowMask"></div>' + '</div>' + '</div>' + '</div>';
            document.body.appendChild(_this.mobileSelect);
            var tempHTML = '';
            for (var i = 0; i < wheelsData.length; i++) {
                tempHTML += '<div class="wheel"><ul class="selectContainer">';
                if (_this.jsonType) {
                    for (var j = 0; j < wheelsData[i].data.length; j++) {
                        tempHTML += '<li data-id="' + wheelsData[i].data[j][_this.keyMap.id] + '">' + wheelsData[i].data[j][_this.keyMap.value] + '</li>'
                    }
                } else {
                    for (var j = 0; j < wheelsData[i].data.length; j++) {
                        tempHTML += '<li>' + wheelsData[i].data[j] + '</li>'
                    }
                }
                tempHTML += '</ul></div>'
            }
            _this.mobileSelect.querySelector('.wheels').innerHTML = tempHTML
        },
        addListenerAll: function() {
            var _this = this;
            for (var i = 0; i < _this.slider.length; i++) {
                (function(i) {
                    _this.addListenerWheel(_this.wheel[i], i)
                })(i)
            }
        },
        addListenerWheel: function(theWheel, index) {
            var _this = this;
            theWheel.addEventListener('touchstart', function(event) {
                _this.touch(event, this.firstChild, index)
            }, {
                passive: !1
            });
            theWheel.addEventListener('touchend', function(event) {
                _this.touch(event, this.firstChild, index)
            }, {
                passive: !1
            });
            theWheel.addEventListener('touchmove', function(event) {
                _this.touch(event, this.firstChild, index)
            }, {
                passive: !1
            });
            if (_this.isPC) {
                theWheel.addEventListener('mousedown', function(event) {
                    _this.dragClick(event, this.firstChild, index)
                }, !1);
                theWheel.addEventListener('mousemove', function(event) {
                    _this.dragClick(event, this.firstChild, index)
                }, !1);
                theWheel.addEventListener('mouseup', function(event) {
                    _this.dragClick(event, this.firstChild, index)
                }, !0)
            }
        },
        checkDataType: function() {
            var _this = this;
            if (typeof(_this.wheelsData[0].data[0]) == 'object') {
                _this.jsonType = !0
            }
        },
        checkCascade: function() {
            var _this = this;
            if (_this.jsonType) {
                var node = _this.wheelsData[0].data;
                for (var i = 0; i < node.length; i++) {
                    if (_this.keyMap.childs in node[i] && node[i][_this.keyMap.childs].length > 0) {
                        _this.cascade = !0;
                        _this.cascadeJsonData = _this.wheelsData[0].data;
                        break
                    }
                }
            } else {
                _this.cascade = !1
            }
        },
        generateArrData: function(targetArr) {
            var tempArr = [];
            var keyMap_id = this.keyMap.id;
            var keyMap_value = this.keyMap.value;
            for (var i = 0; i < targetArr.length; i++) {
                var tempObj = {};
                tempObj[keyMap_id] = targetArr[i][this.keyMap.id];
                tempObj[keyMap_value] = targetArr[i][this.keyMap.value];
                tempArr.push(tempObj)
            }
            return tempArr
        },
        initCascade: function() {
            var _this = this;
            _this.displayJson.push(_this.generateArrData(_this.cascadeJsonData));
            if (_this.initPosition.length > 0) {
                _this.initDeepCount = 0;
                _this.initCheckArrDeep(_this.cascadeJsonData[_this.initPosition[0]])
            } else {
                _this.checkArrDeep(_this.cascadeJsonData[0])
            }
            _this.reRenderWheels()
        },
        initCheckArrDeep: function(parent) {
            var _this = this;
            if (parent) {
                if (_this.keyMap.childs in parent && parent[_this.keyMap.childs].length > 0) {
                    _this.displayJson.push(_this.generateArrData(parent[_this.keyMap.childs]));
                    _this.initDeepCount++;
                    var nextNode = parent[_this.keyMap.childs][_this.initPosition[_this.initDeepCount]];
                    if (nextNode) {
                        _this.initCheckArrDeep(nextNode)
                    } else {
                        _this.checkArrDeep(parent[_this.keyMap.childs][0])
                    }
                }
            }
        },
        checkArrDeep: function(parent) {
            var _this = this;
            if (parent) {
                if (_this.keyMap.childs in parent && parent[_this.keyMap.childs].length > 0) {
                    _this.displayJson.push(_this.generateArrData(parent[_this.keyMap.childs]));
                    _this.checkArrDeep(parent[_this.keyMap.childs][0])
                }
            }
        },
        checkRange: function(index, posIndexArr) {
            var _this = this;
            var deleteNum = _this.displayJson.length - 1 - index;
            for (var i = 0; i < deleteNum; i++) {
                _this.displayJson.pop()
            }
            var resultNode;
            for (var i = 0; i <= index; i++) {
                if (i == 0)
                    resultNode = _this.cascadeJsonData[posIndexArr[0]];
                else {
                    resultNode = resultNode[_this.keyMap.childs][posIndexArr[i]]
                }
            }
            _this.checkArrDeep(resultNode);
            _this.reRenderWheels();
            _this.fixRowStyle();
            _this.setCurDistance(_this.resetPosition(index, posIndexArr))
        },
        resetPosition: function(index, posIndexArr) {
            var _this = this;
            var tempPosArr = posIndexArr;
            var tempCount;
            if (_this.slider.length > posIndexArr.length) {
                tempCount = _this.slider.length - posIndexArr.length;
                for (var i = 0; i < tempCount; i++) {
                    tempPosArr.push(0)
                }
            } else if (_this.slider.length < posIndexArr.length) {
                tempCount = posIndexArr.length - _this.slider.length;
                for (var i = 0; i < tempCount; i++) {
                    tempPosArr.pop()
                }
            }
            for (var i = index + 1; i < tempPosArr.length; i++) {
                tempPosArr[i] = 0
            }
            return tempPosArr
        },
        reRenderWheels: function() {
            var _this = this;
            if (_this.wheel.length > _this.displayJson.length) {
                var count = _this.wheel.length - _this.displayJson.length;
                for (var i = 0; i < count; i++) {
                    _this.wheels.removeChild(_this.wheel[_this.wheel.length - 1])
                }
            }
            for (var i = 0; i < _this.displayJson.length; i++) {
                (function(i) {
                    var tempHTML = '';
                    if (_this.wheel[i]) {
                        for (var j = 0; j < _this.displayJson[i].length; j++) {
                            tempHTML += '<li data-id="' + _this.displayJson[i][j][_this.keyMap.id] + '">' + _this.displayJson[i][j][_this.keyMap.value] + '</li>'
                        }
                        _this.slider[i].innerHTML = tempHTML
                    } else {
                        var tempWheel = document.createElement("div");
                        tempWheel.className = "wheel";
                        tempHTML = '<ul class="selectContainer">';
                        for (var j = 0; j < _this.displayJson[i].length; j++) {
                            tempHTML += '<li data-id="' + _this.displayJson[i][j][_this.keyMap.id] + '">' + _this.displayJson[i][j][_this.keyMap.value] + '</li>'
                        }
                        tempHTML += '</ul>';
                        tempWheel.innerHTML = tempHTML;
                        _this.addListenerWheel(tempWheel, i);
                        _this.wheels.appendChild(tempWheel)
                    }
                })(i)
            }
        },
        updateWheels: function(data) {
            var _this = this;
            if (_this.cascade) {
                _this.cascadeJsonData = data;
                _this.displayJson = [];
                _this.initCascade();
                if (_this.initPosition.length < _this.slider.length) {
                    var diff = _this.slider.length - _this.initPosition.length;
                    for (var i = 0; i < diff; i++) {
                        _this.initPosition.push(0)
                    }
                }
                _this.setCurDistance(_this.initPosition);
                _this.fixRowStyle()
            }
        },
        updateWheel: function(sliderIndex, data) {
            var _this = this;
            var tempHTML = '';
            if (_this.cascade) {
                console.error('级联格式不支持updateWheel(),请使用updateWheels()更新整个数据源');
                return !1
            } else if (_this.jsonType) {
                for (var j = 0; j < data.length; j++) {
                    tempHTML += '<li data-id="' + data[j][_this.keyMap.id] + '">' + data[j][_this.keyMap.value] + '</li>'
                }
                _this.wheelsData[sliderIndex] = {
                    data: data
                }
            } else {
                for (var j = 0; j < data.length; j++) {
                    tempHTML += '<li>' + data[j] + '</li>'
                }
                _this.wheelsData[sliderIndex] = data
            }
            _this.slider[sliderIndex].innerHTML = tempHTML
        },
        fixRowStyle: function() {
            var _this = this;
            var width = (100 / _this.wheel.length).toFixed(2);
            for (var i = 0; i < _this.wheel.length; i++) {
                _this.wheel[i].style.width = width + '%'
            }
        },
        getIndex: function(distance) {
            return Math.round((2 * this.liHeight - distance) / this.liHeight)
        },
        getIndexArr: function() {
            var _this = this;
            var temp = [];
            for (var i = 0; i < _this.curDistance.length; i++) {
                temp.push(_this.getIndex(_this.curDistance[i]))
            }
            return temp
        },
        getCurValue: function() {
            var _this = this;
            var temp = [];
            var positionArr = _this.getIndexArr();
            if (_this.cascade) {
                for (var i = 0; i < _this.wheel.length; i++) {
                    temp.push(_this.displayJson[i][positionArr[i]])
                }
            } else if (_this.jsonType) {
                for (var i = 0; i < _this.curDistance.length; i++) {
                    temp.push(_this.wheelsData[i].data[_this.getIndex(_this.curDistance[i])])
                }
            } else {
                for (var i = 0; i < _this.curDistance.length; i++) {
                    temp.push(_this.getInnerHtml(i))
                }
            }
            return temp
        },
        getValue: function() {
            return this.curValue
        },
        calcDistance: function(index) {
            return 2 * this.liHeight - index * this.liHeight
        },
        setCurDistance: function(indexArr) {
            var _this = this;
            var temp = [];
            for (var i = 0; i < _this.slider.length; i++) {
                temp.push(_this.calcDistance(indexArr[i]));
                _this.movePosition(_this.slider[i], temp[i])
            }
            _this.curDistance = temp
        },
        fixPosition: function(distance) {
            return -(this.getIndex(distance) - 2) * this.liHeight
        },
        movePosition: function(theSlider, distance) {
            theSlider.style.webkitTransform = 'translate3d(0,' + distance + 'px, 0)';
            theSlider.style.transform = 'translate3d(0,' + distance + 'px, 0)'
        },
        locatePosition: function(index, posIndex) {
            var _this = this;
            this.curDistance[index] = this.calcDistance(posIndex);
            this.movePosition(this.slider[index], this.curDistance[index]);
            if (_this.cascade) {
                _this.checkRange(index, _this.getIndexArr())
            }
        },
        updateCurDistance: function(theSlider, index) {
            if (theSlider.style.transform) {
                this.curDistance[index] = parseInt(theSlider.style.transform.split(',')[1])
            } else {
                this.curDistance[index] = parseInt(theSlider.style.webkitTransform.split(',')[1])
            }
        },
        getDistance: function(theSlider) {
            if (theSlider.style.transform) {
                return parseInt(theSlider.style.transform.split(',')[1])
            } else {
                return parseInt(theSlider.style.webkitTransform.split(',')[1])
            }
        },
        getInnerHtml: function(sliderIndex) {
            var _this = this;
            var lengthOfList = _this.slider[sliderIndex].getElementsByTagName("li").length;
            var index = _this.getIndex(_this.curDistance[sliderIndex]);
            if (index >= lengthOfList) {
                index = lengthOfList - 1
            } else if (index < 0) {
                index = 0
            }
            return _this.slider[sliderIndex].getElementsByTagName('li')[index].innerHTML
        },
        touch: function(event, theSlider, index) {
            var _this = this;
            event = event || window.event;
            switch (event.type) {
                case "touchstart":
                    _this.startY = event.touches[0].clientY;
                    _this.startY = parseInt(_this.startY);
                    _this.oldMoveY = _this.startY;
                    break;
                case "touchend":
                    _this.moveEndY = parseInt(event.changedTouches[0].clientY);
                    _this.offsetSum = _this.moveEndY - _this.startY;
                    _this.oversizeBorder = -(theSlider.getElementsByTagName('li').length - 3) * _this.liHeight;
                    let clientHeight = window.innerHeight;
                    // _this.moveEndY -= 60;

                    // if (_this.offsetSum === -1) {
                    //     _this.offsetSum = 0
                    // }
                    if (_this.offsetSum === 0) {
                        var clickOffetNum = parseInt((clientHeight - _this.moveEndY) / 40);
                        if (clickOffetNum !== 2) {
                            var offset = clickOffetNum - 2;
                            var newDistance = _this.curDistance[index] + (offset * _this.liHeight);
                            if ((newDistance <= 2 * _this.liHeight) && (newDistance >= _this.oversizeBorder)) {
                                _this.curDistance[index] = newDistance;
                                _this.movePosition(theSlider, _this.curDistance[index]);
                                _this.transitionEnd(_this.getIndexArr(), _this.getCurValue())
                            }
                        }
                    } else {
                        _this.updateCurDistance(theSlider, index);
                        _this.curDistance[index] = _this.fixPosition(_this.curDistance[index]);
                        _this.movePosition(theSlider, _this.curDistance[index]);
                        if (_this.curDistance[index] + _this.offsetSum > 2 * _this.liHeight) {
                            _this.curDistance[index] = 2 * _this.liHeight;
                            setTimeout(function() {
                                _this.movePosition(theSlider, _this.curDistance[index])
                            }, 100)
                        } else if (_this.curDistance[index] + _this.offsetSum < _this.oversizeBorder) {
                            _this.curDistance[index] = _this.oversizeBorder;
                            setTimeout(function() {
                                _this.movePosition(theSlider, _this.curDistance[index])
                            }, 100)
                        }
                        _this.transitionEnd(_this.getIndexArr(), _this.getCurValue())
                    }
                    if (_this.cascade) {
                        _this.checkRange(index, _this.getIndexArr())
                    }
                    break;
                case "touchmove":
                    event.preventDefault();
                    _this.moveY = event.touches[0].clientY;
                    _this.offset = _this.moveY - _this.oldMoveY;
                    _this.updateCurDistance(theSlider, index);
                    _this.curDistance[index] = _this.curDistance[index] + _this.offset;
                    _this.movePosition(theSlider, _this.curDistance[index]);
                    _this.oldMoveY = _this.moveY;
                    break
            }
        },
        dragClick: function(event, theSlider, index) {
            var _this = this;
            event = event || window.event;
            switch (event.type) {
                case "mousedown":
                    _this.startY = event.clientY;
                    _this.oldMoveY = _this.startY;
                    _this.clickStatus = !0;
                    break;
                case "mouseup":
                    _this.moveEndY = event.clientY;
                    _this.offsetSum = _this.moveEndY - _this.startY;
                    _this.oversizeBorder = -(theSlider.getElementsByTagName('li').length - 3) * _this.liHeight;
                    if (_this.offsetSum == 0) {
                        var clickOffetNum = parseInt((window.innerHeight - _this.moveEndY) / 40);
                        if (clickOffetNum != 2) {
                            var offset = clickOffetNum - 2;
                            var newDistance = _this.curDistance[index] + (offset * _this.liHeight);
                            if ((newDistance <= 2 * _this.liHeight) && (newDistance >= _this.oversizeBorder)) {
                                _this.curDistance[index] = newDistance;
                                _this.movePosition(theSlider, _this.curDistance[index]);
                                _this.transitionEnd(_this.getIndexArr(), _this.getCurValue())
                            }
                        }
                    } else {
                        _this.updateCurDistance(theSlider, index);
                        _this.curDistance[index] = _this.fixPosition(_this.curDistance[index]);
                        _this.movePosition(theSlider, _this.curDistance[index]);
                        if (_this.curDistance[index] + _this.offsetSum > 2 * _this.liHeight) {
                            _this.curDistance[index] = 2 * _this.liHeight;
                            setTimeout(function() {
                                _this.movePosition(theSlider, _this.curDistance[index])
                            }, 100)
                        } else if (_this.curDistance[index] + _this.offsetSum < _this.oversizeBorder) {
                            _this.curDistance[index] = _this.oversizeBorder;
                            setTimeout(function() {
                                _this.movePosition(theSlider, _this.curDistance[index])
                            }, 100)
                        }
                        _this.transitionEnd(_this.getIndexArr(), _this.getCurValue())
                    }
                    _this.clickStatus = !1;
                    if (_this.cascade) {
                        _this.checkRange(index, _this.getIndexArr())
                    }
                    break;
                case "mousemove":
                    event.preventDefault();
                    if (_this.clickStatus) {
                        _this.moveY = event.clientY;
                        _this.offset = _this.moveY - _this.oldMoveY;
                        _this.updateCurDistance(theSlider, index);
                        _this.curDistance[index] = _this.curDistance[index] + _this.offset;
                        _this.movePosition(theSlider, _this.curDistance[index]);
                        _this.oldMoveY = _this.moveY
                    }
                    break
            }
        }
    };
    if (typeof exports == "object") {
        module.exports = MobileSelect
    } else if (typeof define == "function" && define.amd) {
        define([], function() {
            return MobileSelect
        })
    } else {
        window.MobileSelect = MobileSelect
    }
})()
